{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","map","key","SearchBox","onsearchchange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","errorInfo","this","React","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","users","catch","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6b3450d6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ id, name, email }) => {\r\n    // append &set=set4 to get cats\r\n    return (\r\n        <div className=\"bg-light-green tc dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt='Robot friend' />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n        {\r\n          robots.map( ({ id, name, email }) => {\r\n            return (\r\n              <Card\r\n                key={id}\r\n                id={id}\r\n                name={name}\r\n                email={email}\r\n              />\r\n            );\r\n          })\r\n        }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ onsearchchange }) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search' \r\n                placeholder='Search robots'\r\n                onChange={onsearchchange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    static getDerivedStateFromError(error) {\r\n        return { hasError: true };\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        // Log error in 'did catch'. Render fallback UI with static method above\r\n        // TODO, some error loggingthis.setState({ hasError: true });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Ooops. That is not good</h1>;\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\nimport { setSearchField, requestRobots } from \"../actions\";\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        });\r\n        return isPending ? \r\n                <h1>Loading</h1> : \r\n                (\r\n                    <div className='tc'>\r\n                        <h1 className='f1'>RoboFriends</h1>\r\n                        <SearchBox onsearchchange={onSearchChange} />\r\n                        <Scroll>\r\n                            <ErrorBoundary>\r\n                                <CardList robots={filteredRobots} />\r\n                            </ErrorBoundary>\r\n                        </Scroll>\r\n                    </div>\r\n                );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAIL\r\n} from \"./constants.js\"\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: users }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAIL, payload: error }))\r\n}","export const CHANGE_SEARCH_FIELD    = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAIL    = 'REQUEST_ROBOTS_FAIL';","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAIL\r\n} from \"./constants.js\"\r\n\r\n\r\nconst initialStateSearch = { \r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD: \r\n            return Object.assign({}, state, { searchField: action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAIL:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false })\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport './index.css';\nimport 'tachyons';\nimport App from './containers/App';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger));\n\nReactDOM.render(<Provider store={ store }>\n                    <App />\n                </Provider>, document.getElementById('root'));\n\n"],"sourceRoot":""}